bind_cols(results_list[[2]],"method"="cdf"),
bind_cols(results_list[[3]],"method"="pdf_rad0"),
bind_cols(results_list[[4]],"method"="pdf_rad25"),
bind_cols(results_list[[5]],"method"="pdf_rad50"),
bind_cols(results_list[[6]],"method"="pdf_rad75"),)
### Manipulate column "param_value"
results_df = results_df %>%
mutate(param_value = factor(param_value, levels = sort(unique(param_value),
decreasing = param_name=="V")) )
### Plot ARI/F_mse vs n/beta/V
for (measurement in c("1-ARI","f_mse","V_mse")) {
pdf(file=paste0("../Results/Plots/Temp/",
switch(param_name, "beta"="Beta", "n"="N_node", "V"="V"), '_',
if_else(measurement=="1-ARI", true = "ARI", false = measurement), ".pdf"),
width = 6, height = 3)
g = results_df %>%
ggplot(aes(x=param_value,
y=switch(measurement,
"1-ARI" = 1-ARI_mean,
"f_mse" = F_mean_sq_err,
"V_mse" = v_mean_sq_err),
color=method)) +
stat_summary(aes(group=method), position = position_dodge(.2),
geom="point",
fun = mean,
fun.min = function(x)quantile(x,0.25),
fun.max = function(x)quantile(x,0.75)) +
stat_summary(aes(group=method),position = position_dodge(.2),
geom="line",
fun = "mean") +
coord_cartesian(ylim = switch(measurement,
"1-ARI" = c(0,0.4),
"f_mse" = c(0.0,0.02))) +
ylab(measurement) +
xlab(ifelse(param_name=="n", yes="p", no=param_name))
print(g)
dev.off()
}
}
# path_vec = rep(0,2)
#
# path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
# path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec = rep(0,6)
path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec[3] = "../Results/Rdata/SNR_Vnot0/our_v3.4.3_rad0/p=0.7,n=30,beta=1.5,V=80/"
path_vec[4] = "../Results/Rdata/SNR_Vnot0/our_v3.4.3_rad25/p=0.7,n=30,beta=1.5,V=80/"
path_vec[5] = "../Results/Rdata/SNR_Vnot0/our_v3.4.3_rad50/p=0.7,n=30,beta=1.5,V=80/"
path_vec[6] = "../Results/Rdata/SNR_Vnot0/our_v3.4.3_rad75/p=0.7,n=30,beta=1.5,V=80/"
param_name_vec = list.files(path_vec[1])
### For each parameter (n/beta/V), extract results and visualize results
for (param_name in param_name_vec) {
### Extract results for n/beta/V. Output: param_value (n/beta/V's value) | ARI | F_mse | V_mse | method
results_list = lapply(path_vec, function(folder_path)extract_measurement_v2(folder_path = paste0(folder_path,"/",param_name)))
# results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
#                             bind_cols(results_list[[2]],"method"="cdf"))
results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
bind_cols(results_list[[2]],"method"="cdf"),
bind_cols(results_list[[3]],"method"="pdf_rad0"),
bind_cols(results_list[[4]],"method"="pdf_rad25"),
bind_cols(results_list[[5]],"method"="pdf_rad50"),
bind_cols(results_list[[6]],"method"="pdf_rad75"),)
### Manipulate column "param_value"
results_df = results_df %>%
mutate(param_value = factor(param_value, levels = sort(unique(param_value),
decreasing = param_name=="V")) )
### Plot ARI/F_mse vs n/beta/V
for (measurement in c("1-ARI","f_mse","V_mse")) {
pdf(file=paste0("../Results/Plots/Temp/",
switch(param_name, "beta"="Beta", "n"="N_node", "V"="V"), '_',
if_else(measurement=="1-ARI", true = "ARI", false = measurement), ".pdf"),
width = 6, height = 3)
g = results_df %>%
ggplot(aes(x=param_value,
y=switch(measurement,
"1-ARI" = 1-ARI_mean,
"f_mse" = F_mean_sq_err,
"V_mse" = v_mean_sq_err),
color=method)) +
stat_summary(aes(group=method), position = position_dodge(.2),
geom="point",
fun = mean,
fun.min = function(x)quantile(x,0.25),
fun.max = function(x)quantile(x,0.75)) +
stat_summary(aes(group=method),position = position_dodge(.2),
geom="line",
fun = "mean") +
coord_cartesian(ylim = switch(measurement,
"1-ARI" = c(0,0.4),
"f_mse" = c(0.0,0.02))) +
ylab(measurement) +
xlab(ifelse(param_name=="n", yes="p", no=param_name))
print(g)
dev.off()
}
}
rm(list=ls())
file_path = "./functions"
file.sources = list.files(path = file_path, pattern = "*.R$", full.names = TRUE)
sapply(file.sources, source)
SEED = sample(1:1e7,1)
N_node=3-
-27
N_clus
N_clus=3
main_v3.1.1.1(SEED = SEED, N_node_vec = rep(N_node,1),
conn_prob_mean = 0.7, conn_patt_sep = 1.5,
t_vec = seq(0,200,length.out=200),
time_shift_mean_vec = rep(40,N_clus))->tmp
tmp$ARI_vec
tmp$F_mean_sq_err
tmp$v_mean_sq_err
main_v3.4.4(SEED = SEED, N_node_vec = rep(N_node,1),
conn_prob_mean = 0.7, conn_patt_sep = 1.5,
t_vec = seq(0,200,length.out=200),
time_shift_mean_vec = rep(40,N_clus),
opt_radius = 0,)->tmp2
tmp2[c("ARI_vec","F_mean_sq_err","v_mean_sq_err")]
tmp1[c("ARI_vec","F_mean_sq_err","v_mean_sq_err")]
tmp[c("ARI_vec","F_mean_sq_err","v_mean_sq_err")]
# path_vec = rep(0,2)
#
# path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
# path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec = rep(0,6)
path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec[3] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad0/p=0.7,n=30,beta=1.5,V=80/"
path_vec[4] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad25/p=0.7,n=30,beta=1.5,V=80/"
path_vec[5] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad50/p=0.7,n=30,beta=1.5,V=80/"
path_vec[6] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad75/p=0.7,n=30,beta=1.5,V=80/"
param_name_vec = list.files(path_vec[1])
### For each parameter (n/beta/V), extract results and visualize results
for (param_name in param_name_vec) {
### Extract results for n/beta/V. Output: param_value (n/beta/V's value) | ARI | F_mse | V_mse | method
results_list = lapply(path_vec, function(folder_path)extract_measurement_v2(folder_path = paste0(folder_path,"/",param_name)))
# results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
#                             bind_cols(results_list[[2]],"method"="cdf"))
results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
bind_cols(results_list[[2]],"method"="cdf"),
bind_cols(results_list[[3]],"method"="pdf_rad0"),
bind_cols(results_list[[4]],"method"="pdf_rad25"),
bind_cols(results_list[[5]],"method"="pdf_rad50"),
bind_cols(results_list[[6]],"method"="pdf_rad75"),)
### Manipulate column "param_value"
results_df = results_df %>%
mutate(param_value = factor(param_value, levels = sort(unique(param_value),
decreasing = param_name=="V")) )
### Plot ARI/F_mse vs n/beta/V
for (measurement in c("1-ARI","f_mse","V_mse")) {
pdf(file=paste0("../Results/Plots/Temp/",
switch(param_name, "beta"="Beta", "n"="N_node", "V"="V"), '_',
if_else(measurement=="1-ARI", true = "ARI", false = measurement), ".pdf"),
width = 6, height = 3)
g = results_df %>%
ggplot(aes(x=param_value,
y=switch(measurement,
"1-ARI" = 1-ARI_mean,
"f_mse" = F_mean_sq_err,
"V_mse" = v_mean_sq_err),
color=method)) +
stat_summary(aes(group=method), position = position_dodge(.2),
geom="point",
fun = mean,
fun.min = function(x)quantile(x,0.25),
fun.max = function(x)quantile(x,0.75)) +
stat_summary(aes(group=method),position = position_dodge(.2),
geom="line",
fun = "mean") +
coord_cartesian(ylim = switch(measurement,
"1-ARI" = c(0,0.4),
"f_mse" = c(0.0,0.02))) +
ylab(measurement) +
xlab(ifelse(param_name=="n", yes="p", no=param_name))
print(g)
dev.off()
}
}
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
file_path = "./functions"
file.sources = list.files(path = file_path, pattern = "*.R$", full.names = TRUE)
sapply(file.sources, source)
library("tidyverse")
library("dplyr")
library(ggplot2)
# path_vec = rep(0,2)
#
# path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
# path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec = rep(0,6)
path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec[3] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad0/p=0.7,n=30,beta=1.5,V=80/"
path_vec[4] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad25/p=0.7,n=30,beta=1.5,V=80/"
path_vec[5] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad50/p=0.7,n=30,beta=1.5,V=80/"
path_vec[6] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad75/p=0.7,n=30,beta=1.5,V=80/"
param_name_vec = list.files(path_vec[1])
### For each parameter (n/beta/V), extract results and visualize results
for (param_name in param_name_vec) {
### Extract results for n/beta/V. Output: param_value (n/beta/V's value) | ARI | F_mse | V_mse | method
results_list = lapply(path_vec, function(folder_path)extract_measurement_v2(folder_path = paste0(folder_path,"/",param_name)))
# results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
#                             bind_cols(results_list[[2]],"method"="cdf"))
results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
bind_cols(results_list[[2]],"method"="cdf"),
bind_cols(results_list[[3]],"method"="pdf_rad0"),
bind_cols(results_list[[4]],"method"="pdf_rad25"),
bind_cols(results_list[[5]],"method"="pdf_rad50"),
bind_cols(results_list[[6]],"method"="pdf_rad75"),)
### Manipulate column "param_value"
results_df = results_df %>%
mutate(param_value = factor(param_value, levels = sort(unique(param_value),
decreasing = param_name=="V")) )
### Plot ARI/F_mse vs n/beta/V
for (measurement in c("1-ARI","f_mse","V_mse")) {
pdf(file=paste0("../Results/Plots/Temp/",
switch(param_name, "beta"="Beta", "n"="N_node", "V"="V"), '_',
if_else(measurement=="1-ARI", true = "ARI", false = measurement), ".pdf"),
width = 6, height = 3)
g = results_df %>%
ggplot(aes(x=param_value,
y=switch(measurement,
"1-ARI" = 1-ARI_mean,
"f_mse" = F_mean_sq_err,
"V_mse" = v_mean_sq_err),
color=method)) +
stat_summary(aes(group=method), position = position_dodge(.2),
geom="point",
fun = mean,
fun.min = function(x)quantile(x,0.25),
fun.max = function(x)quantile(x,0.75)) +
stat_summary(aes(group=method),position = position_dodge(.2),
geom="line",
fun = "mean") +
coord_cartesian(ylim = switch(measurement,
"1-ARI" = c(0,0.4),
"f_mse" = c(0.0,0.02))) +
ylab(measurement) +
xlab(ifelse(param_name=="n", yes="p", no=param_name))
print(g)
dev.off()
}
}
# path_vec = rep(0,2)
#
# path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
# path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec = rep(0,6)
path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec[3] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad0/p=0.7,n=30,beta=1.5,V=80/"
path_vec[4] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad25/p=0.7,n=30,beta=1.5,V=80/"
path_vec[5] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad50/p=0.7,n=30,beta=1.5,V=80/"
path_vec[6] = "../Results/Rdata/SNR_Vnot0/our_v3.4.4_rad75/p=0.7,n=30,beta=1.5,V=80/"
param_name_vec = list.files(path_vec[1])
### For each parameter (n/beta/V), extract results and visualize results
for (param_name in param_name_vec) {
### Extract results for n/beta/V. Output: param_value (n/beta/V's value) | ARI | F_mse | V_mse | method
results_list = lapply(path_vec, function(folder_path)extract_measurement_v2(folder_path = paste0(folder_path,"/",param_name)))
# results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
#                             bind_cols(results_list[[2]],"method"="cdf"))
results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
bind_cols(results_list[[2]],"method"="cdf"),
bind_cols(results_list[[3]],"method"="cdf+pdf_rad0"),
bind_cols(results_list[[4]],"method"="cdf+pdf_rad25"),
bind_cols(results_list[[5]],"method"="cdf+pdf_rad50"),
bind_cols(results_list[[6]],"method"="cdf+pdf_rad75"),)
### Manipulate column "param_value"
results_df = results_df %>%
mutate(param_value = factor(param_value, levels = sort(unique(param_value),
decreasing = param_name=="V")) )
### Plot ARI/F_mse vs n/beta/V
for (measurement in c("1-ARI","f_mse","V_mse")) {
pdf(file=paste0("../Results/Plots/Temp/",
switch(param_name, "beta"="Beta", "n"="N_node", "V"="V"), '_',
if_else(measurement=="1-ARI", true = "ARI", false = measurement), ".pdf"),
width = 6, height = 3)
g = results_df %>%
ggplot(aes(x=param_value,
y=switch(measurement,
"1-ARI" = 1-ARI_mean,
"f_mse" = F_mean_sq_err,
"V_mse" = v_mean_sq_err),
color=method)) +
stat_summary(aes(group=method), position = position_dodge(.2),
geom="point",
fun = mean,
fun.min = function(x)quantile(x,0.25),
fun.max = function(x)quantile(x,0.75)) +
stat_summary(aes(group=method),position = position_dodge(.2),
geom="line",
fun = "mean") +
coord_cartesian(ylim = switch(measurement,
"1-ARI" = c(0,0.4),
"f_mse" = c(0.0,0.02))) +
ylab(measurement) +
xlab(ifelse(param_name=="n", yes="p", no=param_name))
print(g)
dev.off()
}
}
?cluster::pam
load("/Users/ztzhang/Documents/Academic/SC/graphon/Results/Rdata/real_data_results/Partial_subj_N_clus4.Rdata")
clusters_list
clusters_list[[1]]
clusters_list[[2]]
clusters_list[[3]]
clusters_list[[4]]
clusters_list[[5]]
clusters_list[[6]]
clusters_list[[7]]
clusters_list[[8]]
clusters_list[[9]]
clusters_list[[10]]
clusters_list[[11]]
load("/Users/ztzhang/Documents/Academic/SC/graphon/Results/Rdata/real_data_results/Partial_subj_N_clus5.Rdata")
clusters_list[[1]]
clusters_list[[2]]
clusters_list[[3]]
clusters_list[[4]]
clusters_list[[5]]
clusters_list[[6]]
clusters_list[[7]]
clusters_list[[8]]
clusters_list[[9]]
clusters_list[[10]]
load("/Users/ztzhang/Documents/Academic/SC/graphon/Results/Rdata/real_data_results/Two_subj_N_clus3.Rdata")
clusters_list[[10]]
load("/Users/ztzhang/Documents/Academic/SC/graphon/Results/Rdata/real_data_results/Partial_subj_N_clus3.Rdata")
clusters_list[[10]]
clusters_list[[1]]
clusters_list[[2]]
clusters_list[[3]]
clusters_list[[4]]
clusters_list[[5]]
clusters_list[[6]]
clusters_list[[7]]
clusters_list[[8]]
clusters_list[[9]]
clusters_list[[10]]
load("/Users/ztzhang/Documents/Academic/SC/graphon/Results/Rdata/real_data_results/Two_subj_N_clus3.Rdata")
clusters_list[[1]]
clusters_list[[2]]
clusters_list[[3]]
load("/Users/ztzhang/Documents/Academic/SC/graphon/Results/Rdata/real_data_results/Single_subj_1_N_clus3.Rdata")
clusters_list[[3]]
clusters_list[[1]]
clusters_list[[2]]
load("/Users/ztzhang/Documents/Academic/SC/graphon/Results/Rdata/real_data_results/Two_subj_N_clus3.Rdata")
v_vec_list
v_vec_list[[1]][clusters_list[[1]][[1]]]
v_vec_list[[1]][clusters_list[[1]][[2]]]
v_vec_list[[1]][clusters_list[[1]][[3]]]
summary(v_vec_list[[1]][clusters_list[[1]][[1]]])
summary(v_vec_list[[1]][clusters_list[[1]][[2]]])
summary(v_vec_list[[1]][clusters_list[[1]][[3]]])
# path_vec = rep(0,2)
#
# path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
# path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec = rep(0,6)
path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec[3] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad0/p=0.7,n=30,beta=1.5,V=80/"
path_vec[4] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad25/p=0.7,n=30,beta=1.5,V=80/"
path_vec[5] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad50/p=0.7,n=30,beta=1.5,V=80/"
path_vec[6] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad75/p=0.7,n=30,beta=1.5,V=80/"
param_name_vec = list.files(path_vec[1])
### For each parameter (n/beta/V), extract results and visualize results
for (param_name in param_name_vec) {
### Extract results for n/beta/V. Output: param_value (n/beta/V's value) | ARI | F_mse | V_mse | method
results_list = lapply(path_vec, function(folder_path)extract_measurement_v2(folder_path = paste0(folder_path,"/",param_name)))
# results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
#                             bind_cols(results_list[[2]],"method"="cdf"))
results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
bind_cols(results_list[[2]],"method"="cdf"),
bind_cols(results_list[[3]],"method"="cdf+pdf_rad0"),
bind_cols(results_list[[4]],"method"="cdf+pdf_rad25"),
bind_cols(results_list[[5]],"method"="cdf+pdf_rad50"),
bind_cols(results_list[[6]],"method"="cdf+pdf_rad75"),)
### Manipulate column "param_value"
results_df = results_df %>%
mutate(param_value = factor(param_value, levels = sort(unique(param_value),
decreasing = param_name=="V")) )
### Plot ARI/F_mse vs n/beta/V
for (measurement in c("1-ARI","f_mse","V_mse")) {
pdf(file=paste0("../Results/Plots/Temp/",
switch(param_name, "beta"="Beta", "n"="N_node", "V"="V"), '_',
if_else(measurement=="1-ARI", true = "ARI", false = measurement), ".pdf"),
width = 6, height = 3)
g = results_df %>%
ggplot(aes(x=param_value,
y=switch(measurement,
"1-ARI" = 1-ARI_mean,
"f_mse" = F_mean_sq_err,
"V_mse" = v_mean_sq_err),
color=method)) +
stat_summary(aes(group=method), position = position_dodge(.2),
geom="point",
fun = mean,
fun.min = function(x)quantile(x,0.25),
fun.max = function(x)quantile(x,0.75)) +
stat_summary(aes(group=method),position = position_dodge(.2),
geom="line",
fun = "mean") +
coord_cartesian(ylim = switch(measurement,
"1-ARI" = c(0,0.4),
"f_mse" = c(0.0,0.02))) +
ylab(measurement) +
xlab(ifelse(param_name=="n", yes="p", no=param_name))
print(g)
dev.off()
}
}
rm(list=ls())
rm(list=ls())
file_path = "./functions"
file.sources = list.files(path = file_path, pattern = "*.R$", full.names = TRUE)
sapply(file.sources, source)
library("tidyverse")
library("dplyr")
library(ggplot2)
# path_vec = rep(0,2)
#
# path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
# path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec = rep(0,6)
path_vec[1] = "../Results/Rdata/SNR_Vnot0/our_v3.4/p=0.7,n=30,beta=1.5,V=80"
path_vec[2] = "../Results/Rdata/SNR_Vnot0/our_v3.1.1.1/p=0.7,n=30,beta=1.5,V=80"
path_vec[3] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad0/p=0.7,n=30,beta=1.5,V=80/"
path_vec[4] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad25/p=0.7,n=30,beta=1.5,V=80/"
path_vec[5] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad50/p=0.7,n=30,beta=1.5,V=80/"
path_vec[6] = "../Results/Rdata/SNR_Vnot0/our_v3.4.5_rad75/p=0.7,n=30,beta=1.5,V=80/"
param_name_vec = list.files(path_vec[1])
### For each parameter (n/beta/V), extract results and visualize results
for (param_name in param_name_vec) {
### Extract results for n/beta/V. Output: param_value (n/beta/V's value) | ARI | F_mse | V_mse | method
results_list = lapply(path_vec, function(folder_path)extract_measurement_v2(folder_path = paste0(folder_path,"/",param_name)))
# results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
#                             bind_cols(results_list[[2]],"method"="cdf"))
results_df = bind_rows(bind_cols(results_list[[1]],"method"="pdf"),
bind_cols(results_list[[2]],"method"="cdf"),
bind_cols(results_list[[3]],"method"="cdf+pdf_rad0"),
bind_cols(results_list[[4]],"method"="cdf+pdf_rad25"),
bind_cols(results_list[[5]],"method"="cdf+pdf_rad50"),
bind_cols(results_list[[6]],"method"="cdf+pdf_rad75"),)
### Manipulate column "param_value"
results_df = results_df %>%
mutate(param_value = factor(param_value, levels = sort(unique(param_value),
decreasing = param_name=="V")) )
### Plot ARI/F_mse vs n/beta/V
for (measurement in c("1-ARI","f_mse","V_mse")) {
pdf(file=paste0("../Results/Plots/Temp/",
switch(param_name, "beta"="Beta", "n"="N_node", "V"="V"), '_',
if_else(measurement=="1-ARI", true = "ARI", false = measurement), ".pdf"),
width = 6, height = 3)
g = results_df %>%
ggplot(aes(x=param_value,
y=switch(measurement,
"1-ARI" = 1-ARI_mean,
"f_mse" = F_mean_sq_err,
"V_mse" = v_mean_sq_err),
color=method)) +
stat_summary(aes(group=method), position = position_dodge(.2),
geom="point",
fun = mean,
fun.min = function(x)quantile(x,0.25),
fun.max = function(x)quantile(x,0.75)) +
stat_summary(aes(group=method),position = position_dodge(.2),
geom="line",
fun = "mean") +
coord_cartesian(ylim = switch(measurement,
"1-ARI" = c(0,0.4),
"f_mse" = c(0.0,0.02))) +
ylab(measurement) +
xlab(ifelse(param_name=="n", yes="p", no=param_name))
print(g)
dev.off()
}
}
param_name_vec
path_vec = rep(0,2)
usethis::use_vignette("my-vignette")
setwd("~/Documents/Academic/SC/graphon")
seq(0,1,length.out=4)
matrix(1:9,3,3)
matrix(1:9,3,3)[!lower.tri(matrix(1:9,3,3))]
knitr::opts_chunk$set(echo = TRUE)
network_list = generate_network2_v3(SEED = SEED, N_subj = N_subj, N_node_vec = N_node_vec,
N_clus = N_clus, clus_size_mat = clus_size_mat,
total_time = total_time, t_vec = t_vec,
conn_patt_var = conn_patt_var, conn_patt_sep = conn_patt_sep, const = const,
conn_prob_mean = conn_prob_mean, conn_prob_rad = conn_prob_rad,
time_shift_struc = time_shift_struc,
time_shift_mean_vec = time_shift_mean_vec, time_shift_rad = time_shift_rad)
source('~/Documents/Academic/SC/graphon/Sources/Clustering-pdf/Functions/generate_network2_v3.R')
network_list = generate_network2_v3(SEED = 831, N_subj = 1, N_node_vec = c(12))
rm(list=ls())
file_path = "./functions"
file.sources = list.files(path = file_path, pattern = "*.R$", full.names = TRUE)
sapply(file.sources, source)
network_list = generate_network2_v3(SEED = 831, N_subj = 1, N_node_vec = c(12))
network_list
?list
?density
ecdf(c(1,2,3,Inf,Inf))
ecdf(c(1,2,3,Inf,Inf))(5)
?cluster::pam
